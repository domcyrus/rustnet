name: Release to Ubuntu PPA

on:
  workflow_dispatch:
    inputs:
      ubuntu_release:
        description: 'Ubuntu release codename'
        required: true
        default: 'noble'
        type: choice
        options:
          - noble   # 24.04 LTS
          - oracular # 24.10
  push:
    tags:
      - 'v*'

env:
  DEBEMAIL: cadetg@gmail.com
  DEBFULLNAME: Marco Cadetg
  PPA: ppa:domcyrus/rustnet

jobs:
  build-and-upload:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        ubuntu_release:
          - noble

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            debhelper \
            devscripts \
            dput \
            gnupg \
            libpcap-dev \
            libelf-dev \
            elfutils \
            zlib1g-dev \
            clang \
            llvm \
            pkg-config

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Import GPG key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          gpg --list-secret-keys

      - name: Get version
        id: version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "debian_revision=1ubuntu1" >> $GITHUB_OUTPUT

      - name: Build source package
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          PACKAGE_NAME="rustnet-monitor"

          # Create build directory
          mkdir -p build-ppa

          # Create orig tarball
          git archive --format=tar.gz --prefix="${PACKAGE_NAME}-${VERSION}/" HEAD \
            > "build-ppa/${PACKAGE_NAME}_${VERSION}.orig.tar.gz"

          # Extract and add debian directory
          cd build-ppa
          tar -xzf "${PACKAGE_NAME}_${VERSION}.orig.tar.gz"
          cp -r "$GITHUB_WORKSPACE/debian" "${PACKAGE_NAME}-${VERSION}/"

          # Build source package
          cd "${PACKAGE_NAME}-${VERSION}"
          debuild -S -sa -d -us -uc

      - name: Test build locally
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          PACKAGE_NAME="rustnet-monitor"

          cd build-ppa

          # Extract source package
          dpkg-source -x ${PACKAGE_NAME}_${VERSION}-*.dsc test-build
          cd test-build

          # Install rustup package
          sudo apt-get install -y rustup

          # Setup environment like debian/rules does
          export RUSTUP_HOME=$(pwd)/debian/.rustup
          export CARGO_HOME=$(pwd)/debian/.cargo
          export PATH=$CARGO_HOME/bin:$PATH

          # Install stable toolchain using rustup
          rustup default stable

          # Verify Rust version
          cargo --version
          rustc --version

          # Test compilation
          echo "Testing Rust compilation..."
          cargo build --release --verbose

          echo "âœ… Build test passed!"

      - name: Sign and upload
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          cd build-ppa
          VERSION="${{ steps.version.outputs.version }}"
          DEBIAN_REVISION="${{ steps.version.outputs.debian_revision }}"
          CHANGES_FILE="rustnet-monitor_${VERSION}-${DEBIAN_REVISION}_source.changes"

          # Sign
          debsign -k${GPG_KEY_ID} ${CHANGES_FILE}

          # Verify
          gpg --verify ${CHANGES_FILE}

          # Upload to PPA
          dput ${{ env.PPA }} ${CHANGES_FILE}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ppa-source-${{ matrix.ubuntu_release }}
          path: |
            build-ppa/*.dsc
            build-ppa/*.tar.gz
            build-ppa/*.tar.xz
            build-ppa/*.changes
            build-ppa/*.buildinfo
          retention-days: 30

      - name: Summary
        run: |
          echo "## ðŸŽ‰ PPA Upload Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: rustnet-monitor" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.version }}-${{ steps.version.outputs.debian_revision }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ubuntu**: ${{ matrix.ubuntu_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "sudo add-apt-repository ppa:domcyrus/rustnet" >> $GITHUB_STEP_SUMMARY
          echo "sudo apt update && sudo apt install rustnet" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[View PPA â†’](https://launchpad.net/~domcyrus/+archive/ubuntu/rustnet/+packages)" >> $GITHUB_STEP_SUMMARY
