name: Release to Ubuntu PPA

on:
  workflow_dispatch:
    inputs:
      ubuntu_release:
        description: 'Ubuntu release codename'
        required: true
        default: 'oracular'
        type: choice
        options:
          - oracular # 24.10 with Rust 1.81
          - noble # 24.04 LTS with Rust 1.82
      tarball_suffix:
        description: 'Tarball suffix (e.g., ds1, ds2) - leave empty for new releases'
        required: false
        default: ''
        type: string
  push:
    tags:
      - 'v*'

env:
  DEBEMAIL: cadetg@gmail.com
  DEBFULLNAME: Marco Cadetg
  PPA: ppa:domcyrus/rustnet

jobs:
  build-and-upload:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        ubuntu_release:
          - questing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            debhelper \
            devscripts \
            dput \
            gnupg \
            libpcap-dev \
            libelf-dev \
            elfutils \
            zlib1g-dev \
            clang \
            llvm \
            pkg-config

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Import GPG key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          gpg --list-secret-keys

      - name: Get version
        id: version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')

          # Add tarball suffix if provided (e.g., +ds1, +ds2)
          TARBALL_SUFFIX="${{ github.event.inputs.tarball_suffix }}"
          if [ -n "$TARBALL_SUFFIX" ]; then
            TARBALL_VERSION="${VERSION}+${TARBALL_SUFFIX}"
            echo "version=$TARBALL_VERSION" >> $GITHUB_OUTPUT
            echo "Using tarball version: $TARBALL_VERSION"
          else
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Using version: $VERSION"
          fi

          # Extract Debian revision from changelog
          DEBIAN_REVISION=$(head -1 debian/changelog | sed 's/.*(\(.*\)-\(.*\)).*/\2/')
          echo "debian_revision=$DEBIAN_REVISION" >> $GITHUB_OUTPUT

      - name: Vendor dependencies
        run: |
          echo "Vendoring Rust dependencies..."
          cargo vendor vendor

          # Create cargo config to use vendored deps
          mkdir -p .cargo
          cat > .cargo/config.toml << 'EOF'
          [source.crates-io]
          replace-with = "vendored-sources"

          [source.vendored-sources]
          directory = "vendor"
          EOF

      - name: Build source package
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          PACKAGE_NAME="rustnet-monitor"

          # Create build directory
          mkdir -p build-ppa

          # Create orig tarball with vendored dependencies
          # Include vendor/ and .cargo/ directories for offline builds
          ORIG_TARBALL="${PACKAGE_NAME}_${VERSION}.orig.tar.gz"

          echo "Creating tarball with vendored dependencies..."
          tar -czf "build-ppa/${ORIG_TARBALL}" \
            --transform="s,^,${PACKAGE_NAME}-${VERSION}/," \
            --exclude='.git' \
            --exclude='target' \
            --exclude='build-ppa' \
            --exclude='.github' \
            --exclude='scripts' \
            .

          # Extract and add debian directory
          cd build-ppa
          tar -xzf "${ORIG_TARBALL}"
          cp -r "$GITHUB_WORKSPACE/debian" "${PACKAGE_NAME}-${VERSION}/"

          # Build source package
          cd "${PACKAGE_NAME}-${VERSION}"

          # Always use -sa to include orig tarball
          # Launchpad will reuse existing file if hash matches
          debuild -S -sa -d -us -uc

      - name: Test build locally
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          PACKAGE_NAME="rustnet-monitor"

          cd build-ppa

          # Extract source package
          dpkg-source -x ${PACKAGE_NAME}_${VERSION}-*.dsc test-build
          cd test-build

          # Verify vendored dependencies exist
          if [ ! -d "vendor" ]; then
            echo "❌ Error: vendor/ directory not found in tarball!"
            exit 1
          fi
          echo "✓ Found vendored dependencies ($(du -sh vendor | cut -f1))"

          # Test compilation with vendored deps
          echo "Testing Rust compilation with vendored dependencies..."
          cargo build --release --verbose --offline

          echo "✅ Build test passed!"

      - name: Sign and upload
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          cd build-ppa
          VERSION="${{ steps.version.outputs.version }}"
          DEBIAN_REVISION="${{ steps.version.outputs.debian_revision }}"
          CHANGES_FILE="rustnet-monitor_${VERSION}-${DEBIAN_REVISION}_source.changes"

          # Sign
          debsign -k${GPG_KEY_ID} ${CHANGES_FILE}

          # Verify
          gpg --verify ${CHANGES_FILE}

          # Upload to PPA
          dput ${{ env.PPA }} ${CHANGES_FILE}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ppa-source-${{ matrix.ubuntu_release }}
          path: |
            build-ppa/*.dsc
            build-ppa/*.tar.gz
            build-ppa/*.tar.xz
            build-ppa/*.changes
            build-ppa/*.buildinfo
          retention-days: 30

      - name: Summary
        run: |
          echo "## 🎉 PPA Upload Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: rustnet-monitor" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.version }}-${{ steps.version.outputs.debian_revision }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ubuntu**: ${{ matrix.ubuntu_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "sudo add-apt-repository ppa:domcyrus/rustnet" >> $GITHUB_STEP_SUMMARY
          echo "sudo apt update && sudo apt install rustnet" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[View PPA →](https://launchpad.net/~domcyrus/+archive/ubuntu/rustnet/+packages)" >> $GITHUB_STEP_SUMMARY
